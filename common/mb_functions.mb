'**************************************************************************
'**************************************************************************
'
' mb_functions.mb - contains useful, generic functions
'
'**************************************************************************
'************************************************************************** 

Include "mapbasic.def"
Include "menu.def"
Include "mb_functions.def"

Declare Function ShellExecute Lib "shell32.dll" Alias "ShellExecuteA" (ByVal hWnd As Integer, ByVal lpOperation As String,
			ByVal lpFile As String, ByVal lpParameters As String, ByVal lpDirectory As String, ByVal nShowCmd As Integer) As Integer

'**************************************************************************
' Trims spaces from beginning and end of string
'**************************************************************************

Function Trim$(ByVal sTrim As String) As String
	Trim$ = LTrim$(RTrim$(sTrim))
End Function


'**************************************************************************
' Presents a dialog asking user to choose from open tables
'**************************************************************************

Function ChooseTable(ByVal sDialogTitle As String, ByVal sDialogText As String) As String
	Dim i, iCurrentTable, iTableChoice As Integer
	Dim sTableList() As String

	' Populate array with valid table choices
	For i = 1 to NumTables()
		If TableInfo(i, TAB_INFO_TYPE) = Any(TAB_TYPE_BASE, TAB_TYPE_RESULT) Then
			iCurrentTable = iCurrentTable + 1
			Redim sTableList(iCurrentTable)
			sTableList(iCurrentTable) = TableInfo(i, TAB_INFO_NAME)
		End If
	Next

	Dialog
		Title sDialogTitle
		Width 180 Height 120
		Control StaticText
			Title sDialogText
			Position 5, 8
		Control ListBox
			Title From Variable sTableList 
			Value 1
			Into iTableChoice
			Width 170
			Height 73
			Position 5, 20
		Control OKButton
			Position 30, 100
			Width 50
		Control CancelButton
			Position 100, 100
			Width 50

	If Not CommandInfo(CMD_INFO_DLG_OK) Then
		ChooseTable = ""
		Exit Function
	Else
		ChooseTable = sTableList(iTableChoice)
	End If

End Function

'**************************************************************************
' Returns a point object corresponding to the end of a line object
'**************************************************************************

Function GetEndOfLine(ByVal oLine As Object) As Object
	Dim fLineEndX, fLineEndY As Float
	Dim iNoNodes As Integer

	If ObjectInfo(oLine, OBJ_INFO_TYPE) = OBJ_TYPE_LINE Then
		fLineEndX = ObjectGeography(oLine, OBJ_GEO_LINEENDX)
		fLineEndY = ObjectGeography(oLine, OBJ_GEO_LINEENDY)
	Else
		iNoNodes = ObjectInfo(oLine, OBJ_INFO_NPNTS)
		fLineEndX = ObjectNodeX(oLine, 1, iNoNodes)
		fLineEndY = ObjectNodeY(oLine, 1, iNoNodes)
	End If
	
	
	GetEndOfLine = CreatePoint(fLineEndX, fLineEndY)
End Function

'**************************************************************************
' Returns a point object corresponding to the start of a line object
'**************************************************************************

Function GetStartOfLine(ByVal oLine As Object) As Object
	Dim fLineEndX, fLineEndY As Float
	
	If ObjectInfo(oLine, OBJ_INFO_TYPE) = OBJ_TYPE_LINE Then
		fLineEndX = ObjectGeography(oLine, OBJ_GEO_LINEBEGX)
		fLineEndY = ObjectGeography(oLine, OBJ_GEO_LINEBEGY)
	Else
		fLineEndX = ObjectNodeX(oLine, 1, 1)
		fLineEndY = ObjectNodeY(oLine, 1, 1)
	End If
	
	GetStartOfLine = CreatePoint(fLineEndX, fLineEndY)
End Function

'**************************************************************************
' Returns a line object joining two point objects
'**************************************************************************

Function CreateLineBetweenPoints(ByVal oPoint1 As Object, ByVal oPoint2 As Object) As Object
	CreateLineBetweenPoints = CreateLine(CentroidX(oPoint1), CentroidY(oPoint1), CentroidX(oPoint2), CentroidY(oPoint2))
End Function

'**************************************************************************
' Returns a point object corresponding to a specific node in an object
'**************************************************************************

Function NodePoint(ByVal oObject As Object, ByVal iPolyNo As Integer, ByVal iNodeNo As Integer) As Object
	NodePoint = CreatePoint(ObjectNodeX(oObject, iPolyNo, iNodeNo), ObjectNodeY(oObject, iPolyNo, iNodeNo))
End Function

'**************************************************************************
' Checks whether a given table is open
'**************************************************************************

Function TableExists(ByVal sTable As String) As Logical
	Dim i As Integer
	For i = 1 To NumTables()
		If TableInfo(i, TAB_INFO_NAME) = sTable Then
			TableExists = TRUE
			Exit Function
		End If
	Next

	' Table not found
	TableExists = FALSE

End Function

'**************************************************************************
' Closes a table only if it's actually open
'**************************************************************************

Sub SafeClose(ByVal sTableName As String)
	If TableExists(sTableName) Then
		Close Table sTableName
	End If
End Sub